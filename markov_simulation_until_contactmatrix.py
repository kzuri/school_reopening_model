# -*- coding: utf-8 -*-
"""Markov_simulation_until_ContactMatrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LGWZx3ufYsxbdmKKlBS7wstAHmhTqUfH
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random
import math


# Defining Parameters

#################### PARAMETERS #####################

### STATE A ###

n_students = 1000
n_teach = 200
n_nonteach = 100

n_total = n_students + n_teach + n_nonteach

student_prop = n_students / n_total
teach_prop = n_teach / n_total
nonteach_prop = n_nonteach / n_total

s_age_lower = 18
s_age_upper = 21

avg_batch_size = 230

t_age_lower = 30
t_age_upper = 45

nt_age_lower = 30
nt_age_upper = 50

# residential campus
outside_prop = 0  # changes according to groups
inside_prop = 1 - outside_prop

### STATE B ###
quarantine_prop = 0.1
quarantine_size = (n_students + n_teach + n_nonteach) * quarantine_prop
batches = 100  # total (students+teacher+...)
daily_outside_pop = 0  # Pending...

# 5% infected --india mean i.e 65/1300 infected

testing_period = 14  # function of batches
testing_positive_prop = ""  # function of sensitivity and specificity
# probability of testing if symptoms arises

### STATE C ###

kit_sensitivity = 0.6  # > 0.4 -- < 0.8    #upper and lower limit to be consider
kit_specificity = 0.98  # > 0.95 -- < 0.99

fnr = 1 - kit_sensitivity
fpr = 1 - kit_specificity

### STATE D ###

social_mixing_matrix = ""  # From csv
contact_duration = ""

### random seed ###
seed = 2020

# generate dictionary
def dict_generate(n_total):
    pdict = {}
    for i in range(n_total):
        pdict[i + 1] = {}

    return pdict


# Age distribution
def age_distribute(
    n_students,
    s_age_lower,
    s_age_upper,
    avg_batch_size,
    n_teach,
    t_age_lower,
    t_age_upper,
    n_nonteach,
    nt_age_lower,
    nt_age_upper,
    n_total,
    seed,
):
    random.seed(seed)

    pdict = dict_generate(n_total)

    category = ["Students", "Teaching", "Non teaching"]

    age_count = {"Students": {}, "Teaching": 0, "Non teaching": 0}

    batch = n_students // avg_batch_size

    limit = {"Students": {}, "Teaching": n_teach, "Non teaching": n_nonteach}

    limit["Students"]["Batch 1"] = avg_batch_size + n_students % avg_batch_size
    age_count["Students"]["Batch 1"] = 0

    for i in range(batch - 1):
        limit["Students"]["Batch " + str(i + 2)] = avg_batch_size
        age_count["Students"]["Batch " + str(i + 2)] = 0

    # print("limit : ",limit)
    # print("Age dict: ",age_count)

    stu_age = list(range(s_age_lower, s_age_upper + 1))

    for i in pdict.keys():
        temp = []
        for cat in category:
            if cat == "Students":
                for key in age_count[cat].keys():
                    if age_count[cat][key] >= limit["Students"][key]:
                        temp.append(key)
                        # del age_count[cat][key]
                        # del stu_age[int(key[-1])-1]

            elif age_count[cat] >= limit[cat]:
                del category[category.index(cat)]

        for j in temp:
            # print("before : ",j,stu_age,int(j[-1])+18-1)
            del age_count["Students"][j]
            stu_age.remove(int(j[-1]) + 17)
            # print(j,stu_age)

        pick = random.choice(category)

        pdict[i]["categ"] = pick
        if pick == "Students":
            age = random.choice(stu_age)
            # rint(pick,age)
            pdict[i]["Age"] = age
            age_count[pick]["Batch " + str(age - s_age_lower + 1)] += 1

        elif pick == "Teaching":
            age = random.randint(t_age_lower, t_age_upper)
            # print(pick,age)
            pdict[i]["Age"] = age
            age_count[pick] += 1

        elif pick == "Non teaching":
            age = random.randint(nt_age_lower, nt_age_upper)
            # print(pick,age)
            pdict[i]["Age"] = age
            age_count[pick] += 1

    return pdict


def infected(n_total):
    pdict = age_distribute(
        n_students,
        s_age_lower,
        s_age_upper,
        avg_batch_size,
        n_teach,
        t_age_lower,
        t_age_upper,
        n_nonteach,
        nt_age_lower,
        nt_age_upper,
        n_total,
        seed,
    )

    for k in pdict.keys():
        pdict[k]["Infected"] = 0

    rate = n_total // 20

    for i in random.sample(list(pdict.keys()), rate):
        pdict[i]["Infected"] = 1

    return pdict


def trunc_gauss(mean, sigma, lower, upper):
    a = random.gauss(mean, sigma)

    while (lower <= a <= upper) == False:
        a = random.gauss(mean, sigma)

    return int(a)


def infection_day():

    mean = 6
    sigma = 2
    lower = 1
    upper = 15

    pdict = infected(n_total)

    infect_list = []

    for k in pdict.keys():
        if pdict[k]["Infected"] == 1:
            infect_list.append(k)
            day = trunc_gauss(mean, sigma, lower, upper)

            pdict[k]["day of infection"] = day

            if 3 <= day <= 10:
                pdict[k]["danger"] = "s"  # Danger flags -s Super -a Medium -b Low
            else:
                pdict[k]["danger"] = "a"

            pdict[k]["Status"] = 0  # Status = 1 --> Symptomatic ; 0 --> Asymptomatic

        else:
            pdict[k]["day of infection"] = np.nan
            pdict[k]["danger"] = "b"
            pdict[k]["Status"] = np.nan
    return pdict, infect_list


def symptomatic(n_total):
    pdict, infect_list = infection_day()

    rate = 0.6  # 60% symptomatic, 40% asymptomatic

    for i in random.sample(infect_list, int(rate * len(infect_list))):
        pdict[i]["Status"] = 1

    return pdict, infect_list


def Diff(li1, li2):
    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]
    return li_dif


def test_kit(kit_specificity, kit_sensitivity, fnr, fpr):
    pdict, infect_list = symptomatic(n_total)

    for k in pdict.keys():
        pdict[k]["ContactMatrix"] = 0

    for i in random.sample(infect_list, int(fnr * len(infect_list))):
        pdict[i]["ContactMatrix"] = 1

    uninfect_list = Diff(list(pdict.keys()), infect_list)
    # print(len(uninfect_list))

    fpr_uninfected = random.sample(uninfect_list, int(fpr * len(uninfect_list)))
    # print(len(fpr_uninfected))

    remain_uninfect_list = Diff(uninfect_list, fpr_uninfected)
    # print(len(remain_uninfect_list))

    for i in remain_uninfect_list:
        pdict[i]["ContactMatrix"] = 1

    # print(int(fnr * len(infect_list)))
    return pdict


pdict = test_kit(kit_specificity, kit_sensitivity, fnr, fpr)

v1 = pd.DataFrame.from_dict(pdict).T

v1.to_csv("UntilContactMatrix.csv")

print("Total no. of people entering contact matrix state : ", v1["ContactMatrix"].sum())
